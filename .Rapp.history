df [2,4] <- NA
df
scale(df,center=apply(df,2,median),scale=F)
scale(df,center=apply(df,2,median,na.rm=T),scale=F)
normDf <- scale(df,center=apply(df,2,median,na.rm=T),scale=F)
normDf
apply(normDf,2,median)
apply(normDf,2,median,na.rm=T)
df
normDf
mean(df)
apply(df,2,mean)
apply(df,2,mean,na.rm=T)
apply(df,2,sd,na.rm=T)
?sd
for(col in df) { mean(col) }
for(col in df) { print(col) }
df
names(df)
df
colnames(df) <- c('V1','V2','V3','V4')
df
names(df)
colnames(df)
df[colnames(df)[2]]
df[,colnames(df)[2]]
df[,'V3']
df
type(df)
class(df)
df = data.frame(matrix(rnorm(20), 5, 4))
df
names(df)
df['X2']
df
df[1,1] <- NA
df[2,4] <- NA
ls
df
df[4,4] <- NA
df
impute_na <- function(df,shift,width) {#
        # df contains only normalized, log2-transformed sample intensity columns#
        # return new df containing same columns with missing values replaced,#
        # plus corresponding '_imp' columns indicating which values were imputed#
        tempDf <- df#
#
        for (col in names(df)) {#
                # add imp flag columns#
                tempDf[paste(col,'_imp')] <- is.na(df[col])#
#
                # impute missing values#
                mu <- mean(df[col],na.rm=T) - sd(df[col],na.rm=T)*shift # sample mean - sample SD * shift#
                sd <- sd(df[col],na.rm=T)*width # sample SD * width#
                tempDf[col] <- sapply(df[col],function(x) {ifelse(is.na(x),rnorm(1,mean=mu,sd=sd),x)})#
        }#
        return tempDf#
}
impute_na <- function(df,shift,width) {#
        # df contains only normalized, log2-transformed sample intensity columns#
        # return new df containing same columns with missing values replaced,#
        # plus corresponding '_imp' columns indicating which values were imputed#
        tempDf <- df#
#
        for (col in names(df)) {#
                # add imp flag columns#
                tempDf[paste(col,'_imp')] <- is.na(df[col])#
#
                # impute missing values#
                mu <- mean(df[col],na.rm=T) - sd(df[col],na.rm=T)*shift # sample mean - sample SD * shift#
                sd <- sd(df[col],na.rm=T)*width # sample SD * width#
                tempDf[col] <- sapply(df[col],function(x) {ifelse(is.na(x),rnorm(1,mean=mu,sd=sd),x)})#
        }#
#
        return(tempDf)#
}
impute_na(df,1.8,0.3)
df
col
names(df)
for (col in names(df)) { print(col) }
for (col in names(df)) { df[col] }
for (col in names(df)) { print(df[col]) }
col='X1'
col
is.na(df[col])
tempDf[paste(col,'_imp')] <- is.na(df[col])
tempDf <- df
tempDf
tempDf[paste(col,'_imp')] <- is.na(df[col])
tempDf
paste(col,'_imp')
tempDf <- df
tempDf[paste(col,'_imp',sep='')] <- is.na(df[col])
tempDf
paste(col,'_imp',sep='')
tempDf$paste(col,'_imp',sep='')
tempDf$get(paste(col,'_imp',sep=''))
tempDf[paste(col,'_imp',sep='')]
names(tempDf)
mean(df[col],na.rm=T)
mean(df[,col],na.rm=T)
mean(df$X1,na.rm=T)
mu <- mean(df[,col],na.rm=T) - sd(df[,col],na.rm=T)*shift # sample mean - sample SD * shift#
                sd <- sd(df[,col],na.rm=T)*width
impute_na <- function(df,shift,width) {#
        # df contains only normalized, log2-transformed sample intensity columns#
        # return new df containing same columns with missing values replaced,#
        # plus corresponding '_imp' columns indicating which values were imputed#
        tempDf <- df#
#
        for (col in names(df)) {#
                # add imp flag columns#
                tempDf[paste(col,'_imp',sep='')] <- is.na(df[col])#
#
                # impute missing values#
                mu <- mean(df[,col],na.rm=T) - sd(df[,col],na.rm=T)*shift # sample mean - sample SD * shift#
                sd <- sd(df[,col],na.rm=T)*width # sample SD * width#
                tempDf[col] <- sapply(df[col],function(x) {ifelse(is.na(x),rnorm(1,mean=mu,sd=sd),x)})#
        }#
#
        return(tempDf)#
}
impute_na(df)
impute_na(df,1.5,0.3)
df
names(impute_na(df,1.5,0.3))
impute_na(df,1.5,0.3)
rnorm(1,mean=mu,sd=sd)
mu
rnorm(1,0,1)
col
impute_na <- function(df,shift,width) {#
        # df contains only normalized, log2-transformed sample intensity columns#
        # return new df containing same columns with missing values replaced,#
        # plus corresponding '_imp' columns indicating which values were imputed#
        tempDf <- df#
#
        for (col in names(df)) {#
                # add imp flag columns#
                impCol <- paste(col,'_imp',sep='')#
                tempDf[impCol] <- is.na(df[col])#
#
                # impute missing values#
                mu <- mean(df[,col],na.rm=T) - sd(df[,col],na.rm=T)*shift # sample mean - SD*shift#
                sd <- sd(df[,col],na.rm=T)*width # sample SD*width#
#
                impVals <- rnorm(nrow(df),mean=mu,sd=sd)#
                tempDf[col][tempCol] < impVals[tempCol]#
                # can't do this (would get duplicate "random" values within same apply call)#
                sapply(df[col],function(x) {ifelse(is.na(x),rnorm(1,mean=mu,sd=sd),x)})#
        }#
#
        return(tempDf)#
}
df
imput_na(df,1.5,0.3)
impute_na(df,1.5,0.3)
impute_na <- function(df,shift,width) {#
        # df contains only normalized, log2-transformed sample intensity columns#
        # return new df containing same columns with missing values replaced,#
        # plus corresponding '_imp' columns indicating which values were imputed#
        tempDf <- df#
#
        for (col in names(df)) {#
                # add imp flag columns#
                impCol <- paste(col,'_imp',sep='')#
                tempDf[impCol] <- is.na(df[col])#
#
                # impute missing values#
                mu <- mean(df[,col],na.rm=T) - sd(df[,col],na.rm=T)*shift # sample mean - SD*shift#
                sd <- sd(df[,col],na.rm=T)*width # sample SD*width#
#
                impVals <- rnorm(nrow(df),mean=mu,sd=sd)#
                tempDf[col][impCol] < impVals[impCol]  #
                # can't do this (would get duplicate "random" values within same apply call)#
                sapply(df[col],function(x) {ifelse(is.na(x),rnorm(1,mean=mu,sd=sd),x)})#
        }#
#
        return(tempDf)#
}
impute_na(df)
df
impute_na(df,1.5,0.3)
col
tempDf[col]
impCol
impute_na <- function(df,shift,width) {#
        # df contains only normalized, log2-transformed sample intensity columns#
        # return new df containing same columns with missing values replaced,#
        # plus corresponding '_imp' columns indicating which values were imputed#
        tempDf <- df#
#
        for (col in names(df)) {#
                # add imp flag columns#
                impCol <- paste(col,'_imp',sep='')#
                tempDf[impCol] <- is.na(df[col])#
#
                # impute missing values#
                mu <- mean(df[,col],na.rm=T) - sd(df[,col],na.rm=T)*shift # sample mean - SD*shift#
                sd <- sd(df[,col],na.rm=T)*width # sample SD*width#
#
                impVals <- rnorm(nrow(df),mean=mu,sd=sd)#
                tempDf[col][tempDf[impCol]] <- impVals[tempDf[impCol]]#
                # can't do this (would get duplicate "random" values within same apply call)#
                sapply(df[col],function(x) {ifelse(is.na(x),rnorm(1,mean=mu,sd=sd),x)})#
        }#
#
        return(tempDf)#
}
df
impute_na(df,1.5,0.3)
impVals
tempDf
impCol <- paste(col,'_imp',sep='')
impCol
tempDf[impCol] <- is.na(df[col])
tempDf
mu
sd
shift=1.5
width=0.3
mu <- mean(df[,col],na.rm=T) - sd(df[,col],na.rm=T)*shift # sample mean - SD*shift#
                sd <- sd(df[,col],na.rm=T)*width # sample SD*width
mu
sd
impVals <- rnorm(nrow(df),mean=mu,sd=sd)
impVals
tempDf[impCol]
impVals[tempDf[impCol]]
impVals[tempDf[,impCol]]
tempDf[col][tempDf[,impCol]] <- impVals[tempDf[,impCol]]
tempDf
impute_na <- function(df,shift,width) {#
        # df contains only normalized, log2-transformed sample intensity columns#
        # return new df containing same columns with missing values replaced,#
        # plus corresponding '_imp' columns indicating which values were imputed#
        tempDf <- df#
#
        for (col in names(df)) {#
                # add imp flag columns#
                impCol <- paste(col,'_imp',sep='')#
                tempDf[impCol] <- is.na(df[col])#
#
                # impute missing values#
                mu <- mean(df[,col],na.rm=T) - sd(df[,col],na.rm=T)*shift # sample mean - SD*shift#
                sd <- sd(df[,col],na.rm=T)*width # sample SD*width#
#
                impVals <- rnorm(nrow(df),mean=mu,sd=sd)#
                tempDf[col][tempDf[,impCol]] <- impVals[tempDf[,impCol]]#
                # can't do this (would get duplicate "random" values within same apply call)#
                sapply(df[col],function(x) {ifelse(is.na(x),rnorm(1,mean=mu,sd=sd),x)})#
        }#
#
        return(tempDf)#
}
df
impute_na(df,1.5,0.3)
df
library(genoppi)
get_inweb_list('HIST1H1E')
subset(get_inweb_list('HIST1H1E'),significant)$gene
library(genoppi)
subset(get_inweb_list('TAOK1'),significant)$gene
log(2)
log2(2)
x<-rnorm(100)
ecdf(x)
plot(ecdf(x))
y<-runif(100)
plot(ecdf(y))
z <- data.frame(value=c(x,y),type=c(rep('normal',100),rep('uniform',100)))
z
ggplot(z,aes(value,color=type)) + stat_ecdf()
library(ggplot2)
ggplot(z,aes(value,color=type)) + stat_ecdf()
hist(y)
ggplot(z,aes(value,color=type)) + stat_ecdf() + geom_abline()
ggplot(z,aes(value,color=type)) + stat_ecdf() + geom_abline(slope=1,intercept=0)
ggplot(z,aes(value,color=type)) + stat_ecdf() + geom_abline(slope=1,intercept=0,linetype='dashed')
ggplot(z,aes(value,color=type)) + geom_abline(slope=1,intercept=0,linetype='dashed') + stat_ecdf()
ggplot(z,aes(value,color=type)) + stat_ecdf(linewidth=2) + geom_abline(slope=1,intercept=0,linetype='dashed')
ggplot(z,aes(value,color=type)) + stat_ecdf(linewidth=1.5) + geom_abline(slope=1,intercept=0,linetype='dashed')
ggplot(z,aes(value,color=type)) + stat_ecdf(linewidth=1) + geom_abline(slope=1,intercept=0,linetype='dashed')
phyper(0,1,1,5)
phyper(0,1,1,5,lower.tail=F)
phyper(0,2,3,10,lower.tail=F)
phyper(0,2,3,10,lower.tail=F)$
?phyper
rhyper()
128+149-31
128-31
149-31
97+31+118
library(genoppi)
get_inweb_list('CAPRIN1')
get_inweb_list('GSK3B')
get_inweb_list('HNRNPU')
get_inweb_list('MAP1A')
get_inweb_list('SMARCB1')
get_inweb_list('TLE3')
library(genoppi)
head(msigdb_c1_table)
tail(msigdb_c1_table)
subset(msigdb_c1_table,Set.name=='chr11q22')
subset(msigdb_c1_table,Set.name=='chr22q11')
nrow(subset(msigdb_c1_table,Set.name=='chr22q11'))
nrow(subset(msigdb_c1_table,Set.name=='chr22q11.2'))
msigdb_c2_table
head(msigdb_h_table)
unique(msigdb_h_table$Set.name)
head(msigdb_c2_table)
sapply(strsplit(msigdb_c2_table$Set.name,'_'),'[[',1)
unique(sapply(strsplit(msigdb_c2_table$Set.name,'_'),'[[',1))
sapply(strsplit(msigdb_c2_table$Set.name,'_'),'[[',1)[1:10]
table(sapply(strsplit(msigdb_c2_table$Set.name,'_'),'[[',1))
head(msigdb_h_table)
library(genoppi)
head(msigdb_h_table)
str_match(msigdb_h_table$Set.name,'HALLMARK_(*)')
library(stringr)
str_match(msigdb_h_table$Set.name,'HALLMARK_(*)')
str_match(msigdb_h_table$Set.name,'HALLMARK_(.*)')
dim(str_match(msigdb_h_table$Set.name,'HALLMARK_(.*)'))
str_match(msigdb_h_table$Set.name,'HALLMARK_(.*)'),[,2]
str_match(msigdb_h_table$Set.name,'HALLMARK_(.*)')[,2]
unique(str_match(msigdb_h_table$Set.name,'HALLMARK_(.*)')[,2])
unique(str_match(msigdb_c2_table$Set.name,'KEGG_(.*)')[,2])
str_match(msigdb_c2_table$Set.name,'KEGG_(.*)')[,2]
msgdb_c2_table$KEGG <- str_match(msigdb_c2_table$Set.name,'KEGG_(.*)')[,2]
msigdb_c2_table$K <- str_match(msigdb_c2_table$Set.name,'KEGG_(.*)')[,2]#
msigdb_c2_table$R <- str_match(msigdb_c2_table$Set.name,'REACTOME_(.*)')[,2]
msibdb_c2_table[!is.na(msigdb_c2_table$K),]
msigdb_c2_table[!is.na(msigdb_c2_table$K),]
msigdb_c2_table[!is.na(msigdb_c2_table$K),]$Set.name
unique(msigdb_c2_table[!is.na(msigdb_c2_table$K),]$Set.name)
unique(msigdb_c2_table[!is.na(msigdb_c2_table$K),]$K)
x<-unique(msigdb_c2_table[!is.na(msigdb_c2_table$K),]$K)
x
gsub(x,'_',' ')
gsub('_',' ',x)
library(genoppi)
get_inweb_list('PRKRA')
subset(get_inweb_list('PRKRA'),significant)$gene
sort(subset(get_inweb_list('PRKRA'),significant)$gene)
sort(subset(get_inweb_list('PPP2R1A'),significant)$gene)
installed.packages()
dim(installed.packages())
load('~/Downloads/installed_old.rda')
installedpkgs
install.packages(installedpkgs)
install.packages('Matrix')
library(genoppi)
install.packages('Matrix')
install.packages('BiocManager')
BiocManager::install(c('BiocGenerics',‘BiocVersion’,'ComplexHeatmap','edgeR','Iranges')
BiocManager::install(c('BiocGenerics',‘BiocVersion’,'ComplexHeatmap','edgeR','Iranges'))
BiocManager::install('BiocGenerics')
BiocManager::install('ComplexHeatmap')
devtools::install_github('lagelab/Genoppi',ref='development')
library(genoppi)
library(limma)
libray(RCX)
install.packages('edgeR')
BiocManager::install('edgeR')
BiocManager::install('RCX')
library(RCX)
library(genoppi)
launch_genoppi()
library(genoppi)
launch_genoppi()
packageVersion('genoppi')
-log10(0.05)
-log10(1)
-log10(0.1)
-log10(0.05)
library(genoppi)
launch_genoppi()
packageVersion('shiny')
packageVersion('shinydashboard')
packageVersion('shinydashboardPlus')
packageVersion('bs4Dash')
setwd('~/Google Drive/My Drive/LageLab/GitHub/Genoppi')
devtools::load_all()
launch_genoppi()
devtools::document()
packageVersion('roxygen')
packageVersion('roxygen2')
devtools::document()
devtools::load_all()
launch_genoppi()
